#!/bin/bash



###################################################################################
# Prints a help menu when the script is invoked with -h option or invalid option
###################################################################################

usage () {
    echo "" >&2
    echo "Setup the tickets and tokens required to use FNAL computing" >&2
    echo "">&2
    echo "usage: setup_fnal_security [options]" >&2
    echo "options:" >&2
    echo "     -h/--help:       Prints this usage message.                    " >&2
    echo "     -f/--force:      Force a new token to be generated." >&2
    echo "     -c/--check:      Just check the token, don't get a new one." >&2
    echo "     -b/--batch:      Do not ask for user input." >&2
    echo "     -k/--kerberos:   Also check kerberos ticket." >&2
    echo "     -q/--quiet:      Suppress regular output, errors still shown" >&2
    echo "     -p/--production: Get a Production role proxy instead" >&2
    echo "                      shown. Can only be used in batch mode." >&2
    echo "                                                                 " >&2
    exit 1
}


###################################################################################
# Set default values
###################################################################################

unset FORCE
unset CHECK
unset BATCH
unset KERBEROS
unset QUIET
ROLE=Analysis


###################################################################################
# Use getopt to process the arguments that the script is invoked with
###################################################################################

process_args () {
    errorcode=0
    while getopts "hfcbkqp-:" opt; do
        if [ "$opt" = "-" ]; then
            opt=$OPTARG
        fi
        case $opt in
            h | help)
                usage
		errorcode=1
                ;;
            f | force)
                FORCE=yes
                ;;
            c | check)
                CHECK=yes
                ;;
            b | batch)
                BATCH=yes
                ;;
            k | kerberos)
                KERBEROS=yes
                ;;
            q | quiet)
                QUIET=yes
                ;;
            p | production)
                ROLE=Production
                ;;
            \?)
                exit 2
                ;;
        esac
    done

    if [[ ! -z $QUIET && -z $BATCH ]]; then
        echo "Cannot use quiet mode when not in batch mode." >&2
        exit 2
    fi

    if [[ ! -z $KERBEROS && ! -z $BATCH ]]; then
        echo "Cannot get kerberos tickets in batch mode." >&2
        exit 2
    fi
}



###################################################################################
# Get a kerberos ticket if we can
###################################################################################

do_kinit ()
{
    if [[ -z $BATCH ]]; then
        echo ""
        echo "##########"
        echo "Running: kinit -l 7d"
        kinit -l 7d
        echo "##########"
        echo ""
    else
        echo "Cannot get Kerberos tickets in batch mode."
    fi
}



###################################################################################
# Main body for this script
###################################################################################

main () {

    # Check token location
    default_token=/tmp/bt_token_dune_${ROLE}_$(id -u)
    if [[ ! -z $BEARER_TOKEN_FILE ]]; then
        if [[ $BEARER_TOKEN_FILE != $default_token ]]; then
            echo "##########"
            echo "WARNING:"
            echo "The BEARER_TOKEN_FILE environment variable is set to a non-standard location: $BEARER_TOKEN_FILE."
            echo "If authentication is not working, try reverting to the default value:"
            echo "export BEARER_TOKEN_FILE=$default_token"
            echo "##########"
            echo ""
        fi
    else
        export BEARER_TOKEN_FILE=$default_token
    fi


    # If the -f/--force option is given, remove existing token
    if [[ -f $BEARER_TOKEN_FILE ]]; then
        if [[ -z $FORCE ]]; then
            echo "Existing token found at BEARER_TOKEN_FILE=$BEARER_TOKEN_FILE"
        else
            echo "Forcing regeneration of token by removing existing one from BEARER_TOKEN_FILE=$BEARER_TOKEN_FILE"
            echo "rm $BEARER_TOKEN_FILE"
            rm $BEARER_TOKEN_FILE
        fi
    else
        echo "Generating a token at BEARER_TOKEN_FILE=$BEARER_TOKEN_FILE"
    fi

    # get a new token if there is no existing one
    if [[ ! -f $BEARER_TOKEN_FILE ]]; then
        htgettoken -a htvaultprod.fnal.gov -i nova
    fi

    # Check Kerberos Ticket
    if [[ ! -z $KERBEROS ]]; then
        if ! klist -5 -s && ! klist -s; then
            do_kinit
        fi
    fi

}


###################################################################################
# Special check mode
###################################################################################

check () {

    # Check token location
    default_token=/tmp/bt_token_dune_${ROLE}_$(id -u)
    if [[ ! -z $BEARER_TOKEN_FILE ]]; then
        echo "BEARER_TOKEN_FILE is set to a non-standard location: $BEARER_TOKEN_FILE"
    else
        export BEARER_TOKEN_FILE=$default_token
        echo "BEARER_TOKEN_FILE is set to the standard location: $BEARER_TOKEN_FILE"
    fi
    if [[ ! -f $BEARER_TOKEN_FILE ]]; then
        echo "No token found."
        exit 1
    else
        echo "Existing token found."
    fi

    # Check Kerberos Ticket
    if [[ ! -z $KERBEROS ]]; then
        if ! klist -5 -s && ! klist -s; then
            echo "No valid kerberos ticket."
            exit 1
        fi
    fi

}




###################################################################################
# Process the arguments
###################################################################################

process_args $*


###################################################################################
# Run the script
###################################################################################

if [[ ! -z $CHECK ]]; then
    check
elif [[ -z $QUIET ]]; then
    main
else
    main > /dev/null
fi

